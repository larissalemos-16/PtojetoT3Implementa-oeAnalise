{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN8i43gKpHEJiTYq2HgiZGZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/larissalemos-16/PtojetoT3Implementa-oeAnalise/blob/main/Projeto%20e%20Analise%20de%20Classifica%C3%A7%C3%A3o%20com%20Redes%20Convolucionais%20e%20o%20dataset%20CUFS\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pYDajHLbCldt"
      },
      "outputs": [],
      "source": [
        "# Importar bibliotecas\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "\n",
        "# Configurar seeds para reprodutibilidade\n",
        "tf.random.set_seed(42)\n",
        "np.random.seed(42)\n",
        "\n",
        "# Pré-processamento dos dados\n",
        "data_dir = 'data/' # Substitua pelo caminho do dataset\n",
        "img_height, img_width = 128, 128\n",
        "batch_size = 32\n",
        "\n",
        "# Gerador de dados com augmentação\n",
        "train_datagen = ImageDataGenerator(rescale=1.0/255,\n",
        "                                   validation_split=0.2,\n",
        "                                   rotation_range=20,\n",
        "                                   width_shift_range=0.2,\n",
        "                                   height_shift_range=0.2,\n",
        "                                   horizontal_flip=True)\n",
        "\n",
        "train_data = train_datagen.flow_from_directory(data_dir,\n",
        "                                               target_size=(img_height, img_width),\n",
        "                                               batch_size=batch_size,\n",
        "                                               subset='training')\n",
        "\n",
        "val_data = train_datagen.flow_from_directory(data_dir,\n",
        "                                             target_size=(img_height, img_width),\n",
        "                                             batch_size=batch_size,\n",
        "                                             subset='validation')\n",
        "\n",
        "# Construção do modelo\n",
        "model = Sequential([\n",
        "    Conv2D(32, (3, 3), activation='relu', input_shape=(img_height, img_width, 3)),\n",
        "    MaxPooling2D((2, 2)),\n",
        "    Dropout(0.2),\n",
        "\n",
        "    Conv2D(64, (3, 3), activation='relu'),\n",
        "    MaxPooling2D((2, 2)),\n",
        "    Dropout(0.2),\n",
        "\n",
        "    Conv2D(128, (3, 3), activation='relu'),\n",
        "    MaxPooling2D((2, 2)),\n",
        "    Dropout(0.2),\n",
        "\n",
        "    Flatten(),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(len(train_data.class_indices), activation='softmax')\n",
        "])\n",
        "\n",
        "# Compilação do modelo\n",
        "model.compile(optimizer='adam',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.summary()\n",
        "\n",
        "# Treinamento do modelo\n",
        "epochs = 20\n",
        "history = model.fit(train_data,\n",
        "                    validation_data=val_data,\n",
        "                    epochs=epochs)\n",
        "\n",
        "# Avaliação do modelo\n",
        "val_data.reset()\n",
        "predictions = model.predict(val_data)\n",
        "y_pred = np.argmax(predictions, axis=1)\n",
        "y_true = val_data.classes\n",
        "\n",
        "print(classification_report(y_true, y_pred, target_names=list(val_data.class_indices.keys())))\n",
        "\n",
        "# Matriz de Confusão\n",
        "cm = confusion_matrix(y_true, y_pred)\n",
        "plt.figure(figsize=(10, 8))\n",
        "plt.imshow(cm, cmap='Blues')\n",
        "plt.title('Matriz de Confusão')\n",
        "plt.colorbar()\n",
        "plt.xlabel('Predições')\n",
        "plt.ylabel('Valores Verdadeiros')\n",
        "plt.show()"
      ]
    }
  ]
}